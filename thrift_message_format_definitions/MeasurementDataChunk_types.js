//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ChannelValues = module.exports.ChannelValues = function(args) {
  this.Bools = null;
  this.Bytes = null;
  this.SignedIntegers16 = null;
  this.SignedIntegers32 = null;
  this.SignedIntegers64 = null;
  this.Doubles = null;
  this.Strings = null;
  if (args) {
    if (args.Bools !== undefined && args.Bools !== null) {
      this.Bools = Thrift.copyList(args.Bools, [null]);
    }
    if (args.Bytes !== undefined && args.Bytes !== null) {
      this.Bytes = Thrift.copyList(args.Bytes, [null]);
    }
    if (args.SignedIntegers16 !== undefined && args.SignedIntegers16 !== null) {
      this.SignedIntegers16 = Thrift.copyList(args.SignedIntegers16, [null]);
    }
    if (args.SignedIntegers32 !== undefined && args.SignedIntegers32 !== null) {
      this.SignedIntegers32 = Thrift.copyList(args.SignedIntegers32, [null]);
    }
    if (args.SignedIntegers64 !== undefined && args.SignedIntegers64 !== null) {
      this.SignedIntegers64 = Thrift.copyList(args.SignedIntegers64, [null]);
    }
    if (args.Doubles !== undefined && args.Doubles !== null) {
      this.Doubles = Thrift.copyList(args.Doubles, [null]);
    }
    if (args.Strings !== undefined && args.Strings !== null) {
      this.Strings = Thrift.copyList(args.Strings, [null]);
    }
  }
};
ChannelValues.prototype = {};
ChannelValues.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.Bools = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readBool();
          this.Bools.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.Bytes = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readBinary();
          this.Bytes.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size14 = 0;
        var _rtmp318;
        this.SignedIntegers16 = [];
        var _etype17 = 0;
        _rtmp318 = input.readListBegin();
        _etype17 = _rtmp318.etype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var elem20 = null;
          elem20 = input.readI16();
          this.SignedIntegers16.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size21 = 0;
        var _rtmp325;
        this.SignedIntegers32 = [];
        var _etype24 = 0;
        _rtmp325 = input.readListBegin();
        _etype24 = _rtmp325.etype;
        _size21 = _rtmp325.size;
        for (var _i26 = 0; _i26 < _size21; ++_i26)
        {
          var elem27 = null;
          elem27 = input.readI32();
          this.SignedIntegers32.push(elem27);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size28 = 0;
        var _rtmp332;
        this.SignedIntegers64 = [];
        var _etype31 = 0;
        _rtmp332 = input.readListBegin();
        _etype31 = _rtmp332.etype;
        _size28 = _rtmp332.size;
        for (var _i33 = 0; _i33 < _size28; ++_i33)
        {
          var elem34 = null;
          elem34 = input.readI64();
          this.SignedIntegers64.push(elem34);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size35 = 0;
        var _rtmp339;
        this.Doubles = [];
        var _etype38 = 0;
        _rtmp339 = input.readListBegin();
        _etype38 = _rtmp339.etype;
        _size35 = _rtmp339.size;
        for (var _i40 = 0; _i40 < _size35; ++_i40)
        {
          var elem41 = null;
          elem41 = input.readDouble();
          this.Doubles.push(elem41);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size42 = 0;
        var _rtmp346;
        this.Strings = [];
        var _etype45 = 0;
        _rtmp346 = input.readListBegin();
        _etype45 = _rtmp346.etype;
        _size42 = _rtmp346.size;
        for (var _i47 = 0; _i47 < _size42; ++_i47)
        {
          var elem48 = null;
          elem48 = input.readString();
          this.Strings.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelValues.prototype.write = function(output) {
  output.writeStructBegin('ChannelValues');
  if (this.Bools !== null && this.Bools !== undefined) {
    output.writeFieldBegin('Bools', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.BOOL, this.Bools.length);
    for (var iter49 in this.Bools)
    {
      if (this.Bools.hasOwnProperty(iter49))
      {
        iter49 = this.Bools[iter49];
        output.writeBool(iter49);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.Bytes !== null && this.Bytes !== undefined) {
    output.writeFieldBegin('Bytes', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.Bytes.length);
    for (var iter50 in this.Bytes)
    {
      if (this.Bytes.hasOwnProperty(iter50))
      {
        iter50 = this.Bytes[iter50];
        output.writeBinary(iter50);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.SignedIntegers16 !== null && this.SignedIntegers16 !== undefined) {
    output.writeFieldBegin('SignedIntegers16', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.I16, this.SignedIntegers16.length);
    for (var iter51 in this.SignedIntegers16)
    {
      if (this.SignedIntegers16.hasOwnProperty(iter51))
      {
        iter51 = this.SignedIntegers16[iter51];
        output.writeI16(iter51);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.SignedIntegers32 !== null && this.SignedIntegers32 !== undefined) {
    output.writeFieldBegin('SignedIntegers32', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.I32, this.SignedIntegers32.length);
    for (var iter52 in this.SignedIntegers32)
    {
      if (this.SignedIntegers32.hasOwnProperty(iter52))
      {
        iter52 = this.SignedIntegers32[iter52];
        output.writeI32(iter52);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.SignedIntegers64 !== null && this.SignedIntegers64 !== undefined) {
    output.writeFieldBegin('SignedIntegers64', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I64, this.SignedIntegers64.length);
    for (var iter53 in this.SignedIntegers64)
    {
      if (this.SignedIntegers64.hasOwnProperty(iter53))
      {
        iter53 = this.SignedIntegers64[iter53];
        output.writeI64(iter53);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.Doubles !== null && this.Doubles !== undefined) {
    output.writeFieldBegin('Doubles', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.DOUBLE, this.Doubles.length);
    for (var iter54 in this.Doubles)
    {
      if (this.Doubles.hasOwnProperty(iter54))
      {
        iter54 = this.Doubles[iter54];
        output.writeDouble(iter54);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.Strings !== null && this.Strings !== undefined) {
    output.writeFieldBegin('Strings', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRING, this.Strings.length);
    for (var iter55 in this.Strings)
    {
      if (this.Strings.hasOwnProperty(iter55))
      {
        iter55 = this.Strings[iter55];
        output.writeString(iter55);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Channel = module.exports.Channel = function(args) {
  this.Unit = null;
  this.Values = null;
  this.DisplayIdentifier = null;
  this.Comment = null;
  this.LongIdentifier = null;
  if (args) {
    if (args.Unit !== undefined && args.Unit !== null) {
      this.Unit = args.Unit;
    }
    if (args.Values !== undefined && args.Values !== null) {
      this.Values = new ttypes.ChannelValues(args.Values);
    }
    if (args.DisplayIdentifier !== undefined && args.DisplayIdentifier !== null) {
      this.DisplayIdentifier = args.DisplayIdentifier;
    }
    if (args.Comment !== undefined && args.Comment !== null) {
      this.Comment = args.Comment;
    }
    if (args.LongIdentifier !== undefined && args.LongIdentifier !== null) {
      this.LongIdentifier = args.LongIdentifier;
    }
  }
};
Channel.prototype = {};
Channel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.Unit = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.Values = new ttypes.ChannelValues();
        this.Values.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.DisplayIdentifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.Comment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.LongIdentifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Channel.prototype.write = function(output) {
  output.writeStructBegin('Channel');
  if (this.Unit !== null && this.Unit !== undefined) {
    output.writeFieldBegin('Unit', Thrift.Type.STRING, 1);
    output.writeString(this.Unit);
    output.writeFieldEnd();
  }
  if (this.Values !== null && this.Values !== undefined) {
    output.writeFieldBegin('Values', Thrift.Type.STRUCT, 2);
    this.Values.write(output);
    output.writeFieldEnd();
  }
  if (this.DisplayIdentifier !== null && this.DisplayIdentifier !== undefined) {
    output.writeFieldBegin('DisplayIdentifier', Thrift.Type.STRING, 3);
    output.writeString(this.DisplayIdentifier);
    output.writeFieldEnd();
  }
  if (this.Comment !== null && this.Comment !== undefined) {
    output.writeFieldBegin('Comment', Thrift.Type.STRING, 4);
    output.writeString(this.Comment);
    output.writeFieldEnd();
  }
  if (this.LongIdentifier !== null && this.LongIdentifier !== undefined) {
    output.writeFieldBegin('LongIdentifier', Thrift.Type.STRING, 5);
    output.writeString(this.LongIdentifier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ChannelGroup = module.exports.ChannelGroup = function(args) {
  this.TimeChannel = null;
  this.DataChannels = null;
  this.DisplayIdentifier = null;
  this.Comment = null;
  this.LongIdentifier = null;
  if (args) {
    if (args.TimeChannel !== undefined && args.TimeChannel !== null) {
      this.TimeChannel = Thrift.copyList(args.TimeChannel, [null]);
    }
    if (args.DataChannels !== undefined && args.DataChannels !== null) {
      this.DataChannels = Thrift.copyMap(args.DataChannels, [ttypes.Channel]);
    }
    if (args.DisplayIdentifier !== undefined && args.DisplayIdentifier !== null) {
      this.DisplayIdentifier = args.DisplayIdentifier;
    }
    if (args.Comment !== undefined && args.Comment !== null) {
      this.Comment = args.Comment;
    }
    if (args.LongIdentifier !== undefined && args.LongIdentifier !== null) {
      this.LongIdentifier = args.LongIdentifier;
    }
  }
};
ChannelGroup.prototype = {};
ChannelGroup.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.TimeChannel = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = input.readI64();
          this.TimeChannel.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size63 = 0;
        var _rtmp367;
        this.DataChannels = {};
        var _ktype64 = 0;
        var _vtype65 = 0;
        _rtmp367 = input.readMapBegin();
        _ktype64 = _rtmp367.ktype;
        _vtype65 = _rtmp367.vtype;
        _size63 = _rtmp367.size;
        for (var _i68 = 0; _i68 < _size63; ++_i68)
        {
          var key69 = null;
          var val70 = null;
          key69 = input.readString();
          val70 = new ttypes.Channel();
          val70.read(input);
          this.DataChannels[key69] = val70;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.DisplayIdentifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.Comment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.LongIdentifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ChannelGroup.prototype.write = function(output) {
  output.writeStructBegin('ChannelGroup');
  if (this.TimeChannel !== null && this.TimeChannel !== undefined) {
    output.writeFieldBegin('TimeChannel', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I64, this.TimeChannel.length);
    for (var iter71 in this.TimeChannel)
    {
      if (this.TimeChannel.hasOwnProperty(iter71))
      {
        iter71 = this.TimeChannel[iter71];
        output.writeI64(iter71);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.DataChannels !== null && this.DataChannels !== undefined) {
    output.writeFieldBegin('DataChannels', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.DataChannels));
    for (var kiter72 in this.DataChannels)
    {
      if (this.DataChannels.hasOwnProperty(kiter72))
      {
        var viter73 = this.DataChannels[kiter72];
        output.writeString(kiter72);
        viter73.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.DisplayIdentifier !== null && this.DisplayIdentifier !== undefined) {
    output.writeFieldBegin('DisplayIdentifier', Thrift.Type.STRING, 3);
    output.writeString(this.DisplayIdentifier);
    output.writeFieldEnd();
  }
  if (this.Comment !== null && this.Comment !== undefined) {
    output.writeFieldBegin('Comment', Thrift.Type.STRING, 4);
    output.writeString(this.Comment);
    output.writeFieldEnd();
  }
  if (this.LongIdentifier !== null && this.LongIdentifier !== undefined) {
    output.writeFieldBegin('LongIdentifier', Thrift.Type.STRING, 5);
    output.writeString(this.LongIdentifier);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MeasurementDataChunk = module.exports.MeasurementDataChunk = function(args) {
  this.ChannelGroups = null;
  this.MeasurementSystemID = null;
  this.Comment = null;
  if (args) {
    if (args.ChannelGroups !== undefined && args.ChannelGroups !== null) {
      this.ChannelGroups = Thrift.copyMap(args.ChannelGroups, [ttypes.ChannelGroup]);
    }
    if (args.MeasurementSystemID !== undefined && args.MeasurementSystemID !== null) {
      this.MeasurementSystemID = args.MeasurementSystemID;
    }
    if (args.Comment !== undefined && args.Comment !== null) {
      this.Comment = args.Comment;
    }
  }
};
MeasurementDataChunk.prototype = {};
MeasurementDataChunk.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size74 = 0;
        var _rtmp378;
        this.ChannelGroups = {};
        var _ktype75 = 0;
        var _vtype76 = 0;
        _rtmp378 = input.readMapBegin();
        _ktype75 = _rtmp378.ktype;
        _vtype76 = _rtmp378.vtype;
        _size74 = _rtmp378.size;
        for (var _i79 = 0; _i79 < _size74; ++_i79)
        {
          var key80 = null;
          var val81 = null;
          key80 = input.readString();
          val81 = new ttypes.ChannelGroup();
          val81.read(input);
          this.ChannelGroups[key80] = val81;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.MeasurementSystemID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.Comment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MeasurementDataChunk.prototype.write = function(output) {
  output.writeStructBegin('MeasurementDataChunk');
  if (this.ChannelGroups !== null && this.ChannelGroups !== undefined) {
    output.writeFieldBegin('ChannelGroups', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.ChannelGroups));
    for (var kiter82 in this.ChannelGroups)
    {
      if (this.ChannelGroups.hasOwnProperty(kiter82))
      {
        var viter83 = this.ChannelGroups[kiter82];
        output.writeString(kiter82);
        viter83.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.MeasurementSystemID !== null && this.MeasurementSystemID !== undefined) {
    output.writeFieldBegin('MeasurementSystemID', Thrift.Type.STRING, 2);
    output.writeString(this.MeasurementSystemID);
    output.writeFieldEnd();
  }
  if (this.Comment !== null && this.Comment !== undefined) {
    output.writeFieldBegin('Comment', Thrift.Type.STRING, 3);
    output.writeString(this.Comment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

