//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var ValuesTimeSlice_ttypes = require('./ValuesTimeSlice_types')


var ttypes = module.exports = {};
ThriftDenmMessage = module.exports.ThriftDenmMessage = function(args) {
  this.ProtocolFormat = null;
  this.Id = null;
  this.SenderId = null;
  this.Command = null;
  this.SenderType = null;
  this.ValueTimeSlice = null;
  if (args) {
    if (args.ProtocolFormat !== undefined && args.ProtocolFormat !== null) {
      this.ProtocolFormat = args.ProtocolFormat;
    }
    if (args.Id !== undefined && args.Id !== null) {
      this.Id = args.Id;
    }
    if (args.SenderId !== undefined && args.SenderId !== null) {
      this.SenderId = args.SenderId;
    }
    if (args.Command !== undefined && args.Command !== null) {
      this.Command = args.Command;
    }
    if (args.SenderType !== undefined && args.SenderType !== null) {
      this.SenderType = args.SenderType;
    }
    if (args.ValueTimeSlice !== undefined && args.ValueTimeSlice !== null) {
      this.ValueTimeSlice = new ValuesTimeSlice_ttypes.ValuesTimeSlice(args.ValueTimeSlice);
    }
  }
};
ThriftDenmMessage.prototype = {};
ThriftDenmMessage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.ProtocolFormat = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.Id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.SenderId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.Command = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I16) {
        this.SenderType = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.ValueTimeSlice = new ValuesTimeSlice_ttypes.ValuesTimeSlice();
        this.ValueTimeSlice.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftDenmMessage.prototype.write = function(output) {
  output.writeStructBegin('ThriftDenmMessage');
  if (this.ProtocolFormat !== null && this.ProtocolFormat !== undefined) {
    output.writeFieldBegin('ProtocolFormat', Thrift.Type.I16, 1);
    output.writeI16(this.ProtocolFormat);
    output.writeFieldEnd();
  }
  if (this.Id !== null && this.Id !== undefined) {
    output.writeFieldBegin('Id', Thrift.Type.STRING, 2);
    output.writeString(this.Id);
    output.writeFieldEnd();
  }
  if (this.SenderId !== null && this.SenderId !== undefined) {
    output.writeFieldBegin('SenderId', Thrift.Type.STRING, 3);
    output.writeString(this.SenderId);
    output.writeFieldEnd();
  }
  if (this.Command !== null && this.Command !== undefined) {
    output.writeFieldBegin('Command', Thrift.Type.I16, 4);
    output.writeI16(this.Command);
    output.writeFieldEnd();
  }
  if (this.SenderType !== null && this.SenderType !== undefined) {
    output.writeFieldBegin('SenderType', Thrift.Type.I16, 5);
    output.writeI16(this.SenderType);
    output.writeFieldEnd();
  }
  if (this.ValueTimeSlice !== null && this.ValueTimeSlice !== undefined) {
    output.writeFieldBegin('ValueTimeSlice', Thrift.Type.STRUCT, 6);
    this.ValueTimeSlice.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

