//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ThriftCanMessage = module.exports.ThriftCanMessage = function(args) {
  this.Id = null;
  this.IsExtendedMessage = null;
  this.IsRemoteTransmissionRequest = null;
  this.Ticks = null;
  this.Content = null;
  if (args) {
    if (args.Id !== undefined && args.Id !== null) {
      this.Id = args.Id;
    }
    if (args.IsExtendedMessage !== undefined && args.IsExtendedMessage !== null) {
      this.IsExtendedMessage = args.IsExtendedMessage;
    }
    if (args.IsRemoteTransmissionRequest !== undefined && args.IsRemoteTransmissionRequest !== null) {
      this.IsRemoteTransmissionRequest = args.IsRemoteTransmissionRequest;
    }
    if (args.Ticks !== undefined && args.Ticks !== null) {
      this.Ticks = args.Ticks;
    }
    if (args.Content !== undefined && args.Content !== null) {
      this.Content = args.Content;
    }
  }
};
ThriftCanMessage.prototype = {};
ThriftCanMessage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.Id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.IsExtendedMessage = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.IsRemoteTransmissionRequest = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.Ticks = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.Content = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ThriftCanMessage.prototype.write = function(output) {
  output.writeStructBegin('ThriftCanMessage');
  if (this.Id !== null && this.Id !== undefined) {
    output.writeFieldBegin('Id', Thrift.Type.I32, 1);
    output.writeI32(this.Id);
    output.writeFieldEnd();
  }
  if (this.IsExtendedMessage !== null && this.IsExtendedMessage !== undefined) {
    output.writeFieldBegin('IsExtendedMessage', Thrift.Type.BOOL, 2);
    output.writeBool(this.IsExtendedMessage);
    output.writeFieldEnd();
  }
  if (this.IsRemoteTransmissionRequest !== null && this.IsRemoteTransmissionRequest !== undefined) {
    output.writeFieldBegin('IsRemoteTransmissionRequest', Thrift.Type.BOOL, 3);
    output.writeBool(this.IsRemoteTransmissionRequest);
    output.writeFieldEnd();
  }
  if (this.Ticks !== null && this.Ticks !== undefined) {
    output.writeFieldBegin('Ticks', Thrift.Type.I64, 4);
    output.writeI64(this.Ticks);
    output.writeFieldEnd();
  }
  if (this.Content !== null && this.Content !== undefined) {
    output.writeFieldBegin('Content', Thrift.Type.STRING, 5);
    output.writeBinary(this.Content);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

